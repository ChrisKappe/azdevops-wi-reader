// Generated by https://quicktype.io

namespace AzDevOpsWiReader.Shared
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class GraphGroupList
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("value")]
        public GraphGroup[] GraphGroups { get; set; }
    }

    public partial class GraphGroup
    {
        [JsonProperty("subjectKind")]
        public string SubjectKind { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("domain")]
        public string Domain { get; set; }

        [JsonProperty("principalName")]
        public string PrincipalName { get; set; }

        [JsonProperty("mailAddress")]
        public object MailAddress { get; set; }

        [JsonProperty("origin")]
        public string Origin { get; set; }

        [JsonProperty("originId")]
        public string OriginId { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("_links")]
        public Links Links { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("descriptor")]
        public string Descriptor { get; set; }

        [JsonProperty("isCrossProject", NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsCrossProject { get; set; }
    }

    public partial class MembershipState
    {
        [JsonProperty("href")]
        public Uri Href { get; set; }
    }

    public partial class GraphGroupList
    {
        public static GraphGroupList FromJson(string json) => JsonConvert.DeserializeObject<GraphGroupList>(json, GraphGroupConverter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this GraphGroupList self) => JsonConvert.SerializeObject(self, GraphGroupConverter.Settings);
    }

    internal static class GraphGroupConverter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters = {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
