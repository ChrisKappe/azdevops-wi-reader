@page "/"

@using AzDevOpsWiReader.Web.Data
@using AzDevOpsWiReader.Shared
@using System.Data
@using System.Dynamic
@using System.Text.RegularExpressions
@using DevExpress.Blazor
@using Newtonsoft.Json

@inject IAzDevOpsReaderService ReaderService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navigationManager
@inject IJSRuntime JS

<h1>Azure DevOps User/WorkItem list (<a href="" @onclick="(() => Load())" @onclick:preventDefault>Reload</a> / <a
    href="" @onclick="(() => PopupVisible = true)" @onclick:preventDefault>Configure</a> / <a href=""
    @onclick="(() => Download())" @onclick:preventDefault>Download</a> / <a href="" @onclick="(() => Reset())"
    @onclick:preventDefault>Reset</a>)</h1>

@if (display == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxPopup HeaderText="Azure User/DevOps WorkItem Reader configuration" @bind-Visible="@PopupVisible">
        <Content>
            <EditForm Model=@config OnValidSubmit="HandleSubmit">
                <InputTextArea @bind-Value="config.Content" rows="20" cols="100" />
                <br />
                <button type="submit">Save and reload</button>
            </EditForm>
            <a href="" @onclick="(() => config.Content = Config.DEFAULT_WI)" @onclick:preventDefault>Load default config for
                WorkItem list</a> / <a href="" @onclick="(() => config.Content = Config.DEFAULT_USER)"
            @onclick:preventDefault>Load default config for User list</a> / <a href=""
            @onclick="(() => config.Content = Config.DEFAULT_HISTORY)" @onclick:preventDefault>Load default config for
                Time change history</a>
        </Content>
    </DxPopup>
    <DxDataGrid Data="@display" T="@object" PageSize="20">
        @foreach (DataColumn col in result.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "URL" && c.ColumnName !=
    "ParentURL" && c.ColumnName != "ParentParentURL"))
        {
            <DxDataGridColumn Field="@col.ToString()">
                <DisplayTemplate>
                    @{
                        @if (col.ToString() == "Title" || col.ToString() == "Parent" || col.ToString() == "Task" || col.ToString()
                            == "User Story" || col.ToString() == "Feature")
                        {
                            <span>@((MarkupString)Format((context as IDictionary<String, Object>)[col.ToString() + "_Extended"]))</span>
                        }
                        else
                        {
                            <span>@((MarkupString)Format((context as IDictionary<String, Object>)[col.ToString()]))</span>
                        }
                    }
                </DisplayTemplate>
            </DxDataGridColumn>
        }
    </DxDataGrid>
}

@code {
    private Dictionary<string, DataTable> results;
    private DataTable result;
    private List<object> display;
    bool PopupVisible { get; set; } = false;
    Config config = new Config();
    protected override async Task OnInitializedAsync()
    {
        config = await localStorage.GetItemAsync<Config>("azdevops-wi-reader.config");
        if (config == null)
            config = new Config();
        await Load();
    }

    private async Task Reset()
    {
        await localStorage.RemoveItemAsync("azdevops-wi-reader.config");
        await Load();
    }

    private async Task HandleSubmit()
    {
        await localStorage.SetItemAsync("azdevops-wi-reader.config", config);
        PopupVisible = false;
        navigationManager.NavigateTo("/wireader/", true);
    }

    private static List<dynamic> ConvertDataTableToExpandoObjectList(DataTable dataTable, string titleColumnName = "Title",
        string titleUrlColumnName = "URL", string parentColumnName = "Parent", string parentUrlColumnName = "ParentURL", string
        grandParentColumnName = "ParentParentTitle", string grandParentUrlColumnName = "ParentParentURL")
    {
        List<dynamic> expandoList = new List<dynamic>();
        foreach (DataRow row in dataTable.Rows)
        {
            var expandoDict = new ExpandoObject() as IDictionary<String, Object>;
            foreach (DataColumn col in dataTable.Columns)
            {
                expandoDict.Add(col.ToString(), row[col.ColumnName]);
                Console.WriteLine($"check {col.ColumnName}");
                if (col.ColumnName == titleColumnName)
                {
                    if (row[titleUrlColumnName] != DBNull.Value && !String.IsNullOrEmpty((string)row[titleUrlColumnName]))
                        expandoDict.Add($"{titleColumnName}_Extended", $"=HYPERLINK({row[titleUrlColumnName]};{row[titleColumnName]})");
                    else
                        expandoDict.Add($"{titleColumnName}_Extended", row[titleColumnName]);
                }
                else if (col.ColumnName == parentColumnName)
                {
                    if (row[parentUrlColumnName] != DBNull.Value && !String.IsNullOrEmpty((string)row[parentUrlColumnName]))
                        expandoDict.Add($"{parentColumnName}_Extended", $"=HYPERLINK({row[parentUrlColumnName]};{row[parentColumnName]})");
                    else
                        expandoDict.Add($"{parentColumnName}_Extended", row[parentColumnName]);
                }
                else if (col.ColumnName == grandParentColumnName)
                {
                    if (row[grandParentUrlColumnName] != DBNull.Value && !String.IsNullOrEmpty((string)row[grandParentUrlColumnName]))
                        expandoDict.Add($"{grandParentColumnName}_Extended",
                            $"=HYPERLINK({row[grandParentUrlColumnName]};{row[grandParentColumnName]})");
                    else
                        expandoDict.Add($"{grandParentColumnName}_Extended", row[grandParentColumnName]);
                }
            }
            expandoList.Add(expandoDict);
        }

        return expandoList;
    }

    public async Task Load()
    {
        display = null;
        if (!string.IsNullOrEmpty(config.Content) && config.Content != Config.DEFAULT_WI && config.Content !=
            Config.DEFAULT_USER)
        {
            results = await Task.Run(() => ReaderService.GetAzDevOpsResult(config));
            if (config.Mode == Mode.WorkItems)
                result = results["WorkItems"];
            else if (config.Mode == Mode.History)
                result = results["History"];
            else
                result = results["Users"];

            if (config.Mode == Mode.History)
                display = ConvertDataTableToExpandoObjectList(result, "Task", "URL", "User Story", "ParentURL", "Feature",
                    "ParentParentURL");
            else
                display = ConvertDataTableToExpandoObjectList(result);
        }
        else
        {
            var expandoDict = new ExpandoObject() as IDictionary<String, Object>;
            expandoDict.Add(" ", "Please configure (see link above)!");
            display = new List<dynamic>();
            display.Add(expandoDict);
            result = new DataTable();
            result.Columns.Add(new DataColumn(" "));
        }
    }

    public async Task Download()
    {
        var workbookBytes = new byte[0];
        using (var ms = new System.IO.MemoryStream())
        {
            var wb = ExcelExport.ConvertToExcel(results);
            wb.SaveAs(ms);
            workbookBytes = ms.ToArray();
        }
        await JS.SaveAs("AzDevOpsDownload.xlsx", workbookBytes);
    }

    private string Format(object o)
    {
        var s = o.ToString();
        var match = Regex.Match(s, @"=HYPERLINK\((.*);(.*)\)");
        if (match.Success)
        {
            return $"<a href=\"{match.Groups[1].Value}\" target=\"_blank\">{match.Groups[2].Value}</a>";
        }
        else
        {
            return s;
        }
    }
}
