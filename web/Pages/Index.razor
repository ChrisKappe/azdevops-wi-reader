@page "/"

@using AzDevOpsWiReader.Web.Data
@using System.Data
@using System.Dynamic
@using System.Text.RegularExpressions
@using DevExpress.Blazor

@inject AzDevOpsReaderService ReaderService

<h1>Azure DevOps WorkItem list (<a href="" @onclick="(() => Reload())" @onclick:preventDefault>Reload</a>)</h1>

@if (display == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <DxDataGrid Data="@display"
                T="@object"
                PageSize="20">
        @foreach (DataColumn col in result.Columns.Cast<DataColumn>().Where(c => c.ColumnName != "URL" && c.ColumnName != "ParentURL")) {
            <DxDataGridColumn Field="@col.ToString()">
                <DisplayTemplate>
                    @{
                        @*var dict = context as IDictionary<String, Object>;
                        foreach (var key in dict.Keys)
                        {
                            <span>@key - @dict[key]</span><br />
                        }*@
                        @if (col.ToString() == "Title" || col.ToString() == "Parent")
                        {
                            <span>@((MarkupString)Format((context as IDictionary<String, Object>)[col.ToString() + "_Extended"]))</span>
                        } 
                        else 
                        {
                            <span>@((MarkupString)Format((context as IDictionary<String, Object>)[col.ToString()]))</span>
                        }
                    }
                </DisplayTemplate>
            </DxDataGridColumn>
        }
    </DxDataGrid>
}

@code {
    private DataTable result;
    private List<object> display;

    protected override async Task OnInitializedAsync()
    {
        result = await Task.Run(ReaderService.GetAzDevOpsResult);
        display = ConvertDataTableToExpandoObjectList(result);
    }

    private static List<dynamic> ConvertDataTableToExpandoObjectList(DataTable dataTable) {
        List<dynamic> expandoList = new List<dynamic>();
        foreach (DataRow row in dataTable.Rows) {
            var expandoDict = new ExpandoObject() as IDictionary<String, Object>;
            foreach (DataColumn col in dataTable.Columns) {
                expandoDict.Add(col.ToString(), row[col.ColumnName]);
                if (col.ColumnName == "Title")
                {
                    if (row["URL"] != DBNull.Value && ! String.IsNullOrEmpty((string) row["URL"]))
                        expandoDict.Add("Title_Extended", $"=HYPERLINK({row["URL"]};{row["Title"]})");
                    else
                        expandoDict.Add("Title_Extended", row["Title"]);
                }
                else if (col.ColumnName == "Parent")
                {
                    if (row["ParentURL"] != DBNull.Value && ! String.IsNullOrEmpty((string) row["ParentURL"]))
                        expandoDict.Add("Parent_Extended", $"=HYPERLINK({row["ParentURL"]};{row["Parent"]})");
                    else
                        expandoDict.Add("Parent_Extended", row["Parent"]);
                }
            }
            expandoList.Add(expandoDict);
        }

        return expandoList;
    }

    public void Reload() {

    }

    private string Format(object o) 
    {
        var s = o.ToString();
        var match = Regex.Match(s, @"=HYPERLINK\((.*);(.*)\)");
        if (match.Success)
        {
            return $"<a href=\"{match.Groups[1].Value}\" target=\"_blank\">{match.Groups[2].Value}</a>";
        } 
        else
        {
            return s;
        }
    }
}

