@page "/"

@using AzDevOpsWiReader.Web.Data
@using System.Data
@using System.Dynamic
@using System.Text.RegularExpressions
@using Microsoft.CSharp
@using Radzen
@using Radzen.Blazor
@inject AzDevOpsReaderService ReaderService

<h1>Azure DevOps WorkItem list (<a href="" @onclick="(() => LoadData())" @onclick:preventDefault>Reload</a>)</h1>

@if (result == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenGrid AllowFiltering="true" AllowPaging="true" PageSize="20" AllowSorting="true" Data="@resultList" ColumnWidth="200px">
        <Columns>
            @foreach (var key in columns.Keys)
            {
                <RadzenGridColumn TItem="dynamic" Property="@key" Title="@columns[key].ToString()">
                    <Template Context="data">
                        @if (key == "System_Title" || key == "ParentTitle") 
                        {
                            <span style='color:black'>@((MarkupString)Format(type.GetProperty(key + "_Extended").GetValue(data).ToString()))</span>
                        } 
                        else
                        {
                            <span style='color:black'>@((MarkupString)Format(type.GetProperty(key).GetValue(data).ToString()))</span>
                        }
                        
                    </Template>
                </RadzenGridColumn>
            }
        </Columns>
    </RadzenGrid> 

    @*<div style="overflow:auto;">
        <table class="table">
            <thead>
                <tr>
                    @foreach (var key in columns.Keys)
                    {
                        <th><a href="">@columns[key].ToString()</a></th>
                    }
                </tr>
            </thead>
            <tbody>
                    @foreach (var row in resultList)
                    {
                <tr>
                        @foreach (var key in columns.Keys)
                        {
                            <td>@((MarkupString)Format(type.GetProperty(key).GetValue(row).ToString()))</td>
                        }
                </tr>
                    }
            </tbody>
        </table>
    </div> *@
}

@code {
    private List<ExpandoObject> result;
    private IDictionary<string, object> columns;
    private Type type;
    private List<object> resultList = new List<object>();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        result = await Task.Run(ReaderService.GetAzDevOpsResult);
        columns = result.First() as IDictionary<string, object>;
        var assembly = AzDevOpsWiReader.Shared.DynamicClassCreator.GenerateType(columns);
        type = assembly.GetType("AzDevOpsWiReader.Shared.DynamicTable");
        result.RemoveAt(0);
        foreach (var resultItem in result) 
        {
            var instance = assembly.CreateInstance("AzDevOpsWiReader.Shared.DynamicTable");
            var resultDict = resultItem as IDictionary<string, object>;
            foreach (var key in resultDict.Keys) 
            {
                type.GetProperty(key).SetValue(instance, resultDict[key]);
            }
            resultList.Add(instance);
        }
    }

    private string Format(string s) 
    {
        var match = Regex.Match(s, @"=HYPERLINK\((.*);(.*)\)");
        if (match.Success)
        {
            return $"<a href=\"{match.Groups[1].Value}\" target=\"_blank\">{match.Groups[2].Value}</a>";
        } 
        else
        {
            return s;
        }
    }  
}

